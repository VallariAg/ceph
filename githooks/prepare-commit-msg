#!/usr/bin/python

import subprocess
import re, os, sys

from ComponentMapper import PathToComponent


ROOT_DIR = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
COMMIT_MSG_FILE = sys.argv[1]

def get_signoff():
  signoff_ = subprocess.check_output(['git', 'var', 'GIT_COMMITTER_IDENT'])
  signoff_ = signoff_.decode('utf-8').split(' ')
  signoff = f'Signed-off-by: {" ".join(signoff_[:-2])}'
  return signoff 

def get_titles():
  files_changed = subprocess.check_output(['git','diff','--cached','--name-only'])
  files_changed = files_changed.decode('utf-8').split('\n')
  component_mapper = PathToComponent()
  components = component_mapper.get_all_components(files_changed)
  return components


with open(COMMIT_MSG_FILE, 'r+') as f:
  commit_txt = f.read()
  f.seek(0, 0)

  f.write('#' * 72 + '\n') # indicator for 72 char long commit titles
  f.write('# Possible commit titles:\n')
  title_components = get_titles()
  for component in title_components:
    f.write(f'# {component}: <title>\n')

  f.write("\n\n# Fixes: \n")

  is_signoff = re.search(r'Signed-off-by', commit_txt)
  if not is_signoff:
    signoff = get_signoff()
    f.write(signoff + '\n' + commit_txt)
  else:
    f.write(commit_txt[2:]) # remove two \n before signoff

